name: 'Project Setup'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

permissions:
  contents: write
  issues: write

jobs:
  setup:
    name: 'Initial Project Setup'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Create Project Structure
      run: |
        # Create basic directory structure if it doesn't exist
        mkdir -p terraform/modules
        mkdir -p terraform/environments/${{ github.event.inputs.environment }}
        mkdir -p docs
        mkdir -p scripts
        # Python app directories
        mkdir -p app/static/css
        mkdir -p app/static/js
        mkdir -p app/static/images
        mkdir -p app/templates/products
        mkdir -p app/templates/cart
        mkdir -p app/templates/orders
        mkdir -p app/templates/user
        mkdir -p app/models
        mkdir -p app/routes
        mkdir -p app/utils
     
    - name: Create Initial Terraform Files
      run: |
        # Only create files if they don't exist
        if [ ! -f terraform/environments/${{ github.event.inputs.environment }}/main.tf ]; then
          cat > terraform/environments/${{ github.event.inputs.environment }}/main.tf << 'EOF'
        terraform {
          required_version = ">= 1.0.0"
          
          backend "s3" {
            # Backend configuration will be provided during terraform init
          }
          
          required_providers {
            aws = {
              source  = "hashicorp/aws"
              version = "~> 4.0"
            }
          }
        }

        provider "aws" {
          region = "us-east-1"
          
          default_tags {
            tags = {
              Environment = "${{ github.event.inputs.environment }}"
              Project     = "Project-0"
              ManagedBy   = "Terraform"
            }
          }
        }
        EOF
        fi
        
        if [ ! -f terraform/environments/${{ github.event.inputs.environment }}/variables.tf ]; then
          cat > terraform/environments/${{ github.event.inputs.environment }}/variables.tf << 'EOF'
        variable "region" {
          description = "AWS region to deploy resources"
          type        = string
          default     = "us-east-1"
        }

        variable "environment" {
          description = "Environment name"
          type        = string
          default     = "${{ github.event.inputs.environment }}"
        }
        EOF
        fi
        
        if [ ! -f terraform/environments/${{ github.event.inputs.environment }}/outputs.tf ]; then
          cat > terraform/environments/${{ github.event.inputs.environment }}/outputs.tf << 'EOF'
        # Output definitions will go here
        EOF
        fi
    
    - name: Create README if not exists
      run: |
        if [ ! -f README.md ]; then
          cat > README.md << 'EOF'
        # Project-0
        
        Multi-region AWS infrastructure deployment using Terraform and GitHub Actions.
        
        ## Architecture
        
        See the [architecture documentation](docs/architecture.md) for details on the infrastructure design.
        
        ## Getting Started
        
        1. Clone this repository
        2. Set up the required GitHub secrets for AWS authentication
        3. Run the Project Setup workflow to initialize the environment
        4. Push changes to trigger the Terraform workflow
        
        ## Environments
        
        - dev: Development environment
        - test: Testing environment
        - prod: Production environment
        
        ## Workflows
        
        - `project-setup.yml`: Initialize project structure
        - `terraform.yml`: Deploy infrastructure using Terraform
        
        ## Security
        
        This project follows AWS security best practices including:
        - Least privilege IAM roles
        - OIDC authentication for GitHub Actions
        - Security scanning with tfsec and checkov
        - Manual approval for production changes
        EOF
        fi
    
    - name: Validate Repository
      run: |
        # Check if required directories exist
        if [ ! -d "terraform" ]; then
          echo "::error::Terraform directory is missing"
          exit 1
        fi
        
        if [ ! -d "docs" ]; then
          echo "::error::Docs directory is missing"
          exit 1
        fi
        
        echo "Repository structure validated successfully"
    
    - name: Create Issue with Next Steps
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Project Setup Completed - Next Steps',
            body: `
            # Project Setup Complete
            
            The basic project structure has been created for the \`${{ github.event.inputs.environment }}\` environment.
            
            ## Next Steps
            
            1. Set up the required GitHub secrets:
               - \`AWS_ROLE_TO_ASSUME\`: ARN of the IAM role for GitHub Actions
               - \`TERRAFORM_LOCK_TABLE\`: Name of your DynamoDB table for state locking
            
            2. Create an S3 bucket for Terraform state storage
            
            3. Create a DynamoDB table for state locking
            
            4. Update the Terraform backend configuration
            
            5. Add your infrastructure code to the Terraform files
            
            6. Push changes to trigger the Terraform workflow
            
            ## Resources
            
            - [Terraform AWS Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)
            - [GitHub Actions Documentation](https://docs.github.com/en/actions)
            `
          })
          
    - name: Create Python App Files
      run: |
        # Create requirements.txt
        cat > app/requirements.txt << 'EOF'
        Flask==2.2.3
        boto3==1.26.84
        flask-dynamo==0.1.2
        Werkzeug==2.2.3
        python-dotenv==1.0.0
        EOF
        
        # Create app.py
        cat > app/app.py << 'EOF'
        from flask import Flask, render_template, request, redirect, url_for, session, jsonify
        from flask_dynamo import Dynamo
        import boto3
        import os
        import uuid
        from datetime import datetime
        import json
        from werkzeug.middleware.proxy_fix import ProxyFix

        app = Flask(__name__)
        app.secret_key = os.environ.get('SECRET_KEY', 'dev-secret-key')

        # Configure DynamoDB
        app.config['DYNAMO_ENABLE_LOCAL'] = False
        app.config['DYNAMO_TABLES'] = [
            {
                'TableName': os.environ.get('PRODUCTS_TABLE', 'products'),
                'KeySchema': [dict(AttributeName='id', KeyType='HASH')],
                'AttributeDefinitions': [dict(AttributeName='id', AttributeType='S')],
                'ProvisionedThroughput': dict(ReadCapacityUnits=5, WriteCapacityUnits=5)
            },
            {
                'TableName': os.environ.get('CARTS_TABLE', 'carts'),
                'KeySchema': [dict(AttributeName='id', KeyType='HASH')],
                'AttributeDefinitions': [dict(AttributeName='id', AttributeType='S')],
                'ProvisionedThroughput': dict(ReadCapacityUnits=5, WriteCapacityUnits=5)
            },
            {
                'TableName': os.environ.get('ORDERS_TABLE', 'orders'),
                'KeySchema': [dict(AttributeName='id', KeyType='HASH')],
                'AttributeDefinitions': [dict(AttributeName='id', AttributeType='S')],
                'ProvisionedThroughput': dict(ReadCapacityUnits=5, WriteCapacityUnits=5)
            }
        ]

        # Initialize DynamoDB
        dynamo = Dynamo(app)

        # Configure S3
        s3 = boto3.client('s3',
            region_name=os.environ.get('AWS_REGION', 'us-east-1')
        )
        BUCKET_NAME = os.environ.get('S3_BUCKET', 'project0-static-assets')

        # Fix for running behind a proxy
        app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_port=1)

        @app.route('/')
        def index():
            # Get products from DynamoDB (mock data for now)
            products = [
                {
                    'id': '1',
                    'name': 'Product 1',
                    'description': 'This is product 1',
                    'price': '19.99',
                    'stock': 10
                },
                {
                    'id': '2',
                    'name': 'Product 2',
                    'description': 'This is product 2',
                    'price': '29.99',
                    'stock': 5
                }
            ]
            
            return render_template('index.html', products=products)

        @app.route('/products')
        def products():
            # Get products from DynamoDB (mock data for now)
            products = [
                {
                    'id': '1',
                    'name': 'Product 1',
                    'description': 'This is product 1',
                    'price': '19.99',
                    'stock': 10
                },
                {
                    'id': '2',
                    'name': 'Product 2',
                    'description': 'This is product 2',
                    'price': '29.99',
                    'stock': 5
                }
            ]
            
            return render_template('products/list.html', products=products)

        @app.route('/products/<product_id>')
        def product_detail(product_id):
            # Get product from DynamoDB (mock data for now)
            product = {
                'id': product_id,
                'name': f'Product {product_id}',
                'description': f'This is product {product_id}',
                'price': '19.99',
                'stock': 10
            }
            
            return render_template('products/detail.html', product=product)

        @app.route('/cart')
        def cart():
            return render_template('cart/view.html')

        @app.route('/health')
        def health():
            return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

        if __name__ == '__main__':
            port = int(os.environ.get('PORT', 5000))
            app.run(host='0.0.0.0', port=port)
        EOF
        
        # Create Dockerfile
        cat > app/Dockerfile << 'EOF'
        FROM python:3.9-slim

        WORKDIR /app

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        COPY . .

        EXPOSE 5000

        CMD ["python", "app.py"]
        EOF
        
        # Create CSS file
        cat > app/static/css/styles.css << 'EOF'
        /* Custom styles for the e-commerce application */
        .card-img-top {
            height: 200px;
            object-fit: cover;
        }
        
        .jumbotron {
            background-color: #f8f9fa;
            padding: 2rem;
            margin-bottom: 2rem;
            border-radius: 0.3rem;
        }
        EOF
        
        # Create JS file
        cat > app/static/js/main.js << 'EOF'
        // Main JavaScript file for the e-commerce application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('E-commerce application loaded');
            
            // Add to cart functionality
            const addToCartForms = document.querySelectorAll('form[action="/cart/add"]');
            addToCartForms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    console.log('Adding item to cart');
                });
            });
        });
        EOF
        
        # Create base template
        cat > app/templates/base.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{% block title %}E-Commerce Store{% endblock %}</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
        </head>
        <body>
            <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                <div class="container">
                    <a class="navbar-brand" href="/">E-Commerce Store</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav me-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="/">Home</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="/products">Products</a>
                            </li>
                        </ul>
                        <ul class="navbar-nav">
                            <li class="nav-item">
                                <a class="nav-link" href="/cart">Cart</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            <div class="container mt-4">
                {% block content %}{% endblock %}
            </div>

            <footer class="bg-dark text-white mt-5 py-4">
                <div class="container">
                    <div class="row">
                        <div class="col-md-6">
                            <h5>E-Commerce Store</h5>
                            <p>Your one-stop shop for all your needs.</p>
                        </div>
                        <div class="col-md-3">
                            <h5>Links</h5>
                            <ul class="list-unstyled">
                                <li><a href="/" class="text-white">Home</a></li>
                                <li><a href="/products" class="text-white">Products</a></li>
                            </ul>
                        </div>
                        <div class="col-md-3">
                            <h5>Contact</h5>
                            <address class="text-white">
                                123 E-Commerce St.<br>
                                Cloud City, AWS 12345<br>
                                <a href="mailto:info@example.com" class="text-white">info@example.com</a>
                            </address>
                        </div>
                    </div>
                    <hr>
                    <div class="text-center">
                        <p>&copy; 2023 E-Commerce Store. All rights reserved.</p>
                    </div>
                </div>
            </footer>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
            <script src="{{ url_for('static', filename='js/main.js') }}"></script>
        </body>
        </html>
        EOF
        
        # Create index template
        cat > app/templates/index.html << 'EOF'
        {% extends 'base.html' %}

        {% block title %}Home - E-Commerce Store{% endblock %}

        {% block content %}
        <div class="jumbotron bg-light p-5 rounded">
            <h1 class="display-4">Welcome to our E-Commerce Store</h1>
            <p class="lead">Discover amazing products at great prices.</p>
            <hr class="my-4">
            <p>Browse our collection of high-quality products.</p>
            <a class="btn btn-primary btn-lg" href="/products" role="button">Shop Now</a>
        </div>

        <h2 class="mt-5 mb-4">Featured Products</h2>

        <div class="row">
            {% for product in products %}
            <div class="col-md-3 mb-4">
                <div class="card h-100">
                    <div class="card-img-top bg-light text-center py-5">No Image</div>
                    <div class="card-body">
                        <h5 class="card-title">{{ product.name }}</h5>
                        <p class="card-text">{{ product.description }}</p>
                        <p class="card-text text-primary fw-bold">${{ product.price }}</p>
                        <a href="/products/{{ product.id }}" class="btn btn-outline-primary">View Details</a>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
        {% endblock %}
        EOF
        
        # Create products list template
        cat > app/templates/products/list.html << 'EOF'
        {% extends 'base.html' %}

        {% block title %}Products - E-Commerce Store{% endblock %}

        {% block content %}
        <h1 class="mb-4">All Products</h1>

        <div class="row">
            {% for product in products %}
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-img-top bg-light text-center py-5">No Image</div>
                    <div class="card-body">
                        <h5 class="card-title">{{ product.name }}</h5>
                        <p class="card-text">{{ product.description }}</p>
                        <p class="card-text text-primary fw-bold">${{ product.price }}</p>
                        <a href="/products/{{ product.id }}" class="btn btn-primary">View Details</a>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
        {% endblock %}
        EOF
        
        # Create product detail template
        cat > app/templates/products/detail.html << 'EOF'
        {% extends 'base.html' %}

        {% block title %}{{ product.name }} - E-Commerce Store{% endblock %}

        {% block content %}
        <div class="row">
            <div class="col-md-6">
                <div class="bg-light text-center py-5 rounded">No Image Available</div>
            </div>
            <div class="col-md-6">
                <h1>{{ product.name }}</h1>
                <p class="text-primary fs-2 fw-bold">${{ product.price }}</p>
                <p>{{ product.description }}</p>
                
                <form action="/cart/add" method="post" class="mt-4">
                    <input type="hidden" name="product_id" value="{{ product.id }}">
                    <div class="input-group mb-3" style="max-width: 200px;">
                        <span class="input-group-text">Quantity</span>
                        <input type="number" class="form-control" name="quantity" value="1" min="1" max="{{ product.stock }}">
                    </div>
                    <button type="submit" class="btn btn-primary">Add to Cart</button>
                </form>
            </div>
        </div>
        {% endblock %}
        EOF
        
        # Create cart view template
        cat > app/templates/cart/view.html << 'EOF'
        {% extends 'base.html' %}

        {% block title %}Shopping Cart - E-Commerce Store{% endblock %}

        {% block content %}
        <h1 class="mb-4">Shopping Cart</h1>
        
        {% if cart_items %}
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for item in cart_items %}
                    <tr>
                        <td>{{ item.product.name }}</td>
                        <td>${{ item.product.price }}</td>
                        <td>{{ item.quantity }}</td>
                        <td>${{ item.product.price * item.quantity }}</td>
                        <td>
                            <form action="/cart/remove" method="post">
                                <input type="hidden" name="product_id" value="{{ item.product_id }}">
                                <button type="submit" class="btn btn-sm btn-danger">Remove</button>
                            </form>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
                <tfoot>
                    <tr>
                        <th colspan="3" class="text-end">Total:</th>
                        <th>${{ total }}</th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
            
            <div class="d-flex justify-content-end mt-4">
                <a href="/checkout" class="btn btn-success">Proceed to Checkout</a>
            </div>
        </div>
        {% else %}
        <div class="alert alert-info">
            Your cart is currently empty. <a href="/products">Continue shopping</a>.
        </div>
        {% endif %}
        {% endblock %}
        EOF
        
        # Create a simple model file
        cat > app/models/product.py << 'EOF'
        import boto3
        import os
        from datetime import datetime
        import uuid

        class Product:
            def __init__(self, id=None, name=None, description=None, price=None, stock=None, image_url=None):
                self.id = id or str(uuid.uuid4())
                self.name = name
                self.description = description
                self.price = price
                self.stock = stock
                self.image_url = image_url
                self.created_at = datetime.now().isoformat()
                self.updated_at = self.created_at
            
            @classmethod
            def get_table(cls):
                """Get the DynamoDB table for products"""
                dynamodb = boto3.resource('dynamodb')
                return dynamodb.Table(os.environ.get('PRODUCTS_TABLE', 'products'))
            
            @classmethod
            def get_all(cls):
                """Get all products from DynamoDB"""
                table = cls.get_table()
                response = table.scan()
                return [cls(**item) for item in response.get('Items', [])]
            
            @classmethod
            def get_by_id(cls, product_id):
                """Get a product by ID"""
                table = cls.get_table()
                response = table.get_item(Key={'id': product_id})
                item = response.get('Item')
                if item:
                    return cls(**item)
                return None
            
            def save(self):
                """Save the product to DynamoDB"""
                table = self.get_table()
                self.updated_at = datetime.now().isoformat()
                
                item = {
                    'id': self.id,
                    'name': self.name,
                    'description': self.description,
                    'price': self.price,
                    'stock': self.stock,
                    'image_url': self.image_url,
                    'created_at': self.created_at,
                    'updated_at': self.updated_at
                }
                
                table.put_item(Item=item)
                return self
            
            def delete(self):
                """Delete the product from DynamoDB"""
                table = self.get_table()
                table.delete_item(Key={'id': self.id})
                return True
            
            def to_dict(self):
                """Convert the product to a dictionary"""
                return {
                    'id': self.id,
                    'name': self.name,
                    'description': self.description,
                    'price': self.price,
                    'stock': self.stock,
                    'image_url': self.image_url,
                    'created_at': self.created_at,
                    'updated_at': self.updated_at
                }
        EOF
        
        # Create a simple route file
        cat > app/routes/product_routes.py << 'EOF'
        from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
        from app.models.product import Product

        product_bp = Blueprint('product', __name__)

        @product_bp.route('/api/products')
        def api_products():
            """API endpoint to get all products"""
            products = Product.get_all()
            return jsonify([product.to_dict() for product in products])

        @product_bp.route('/api/products/<product_id>')
        def api_product_detail(product_id):
            """API endpoint to get a product by ID"""
            product = Product.get_by_id(product_id)
            if product:
                return jsonify(product.to_dict())
            return jsonify({'error': 'Product not found'}), 404
        EOF
        
        # Create a simple utility file
        cat > app/utils/aws_helpers.py << 'EOF'
        import boto3
        import os
        import uuid
        from datetime import datetime, timedelta

        def get_s3_presigned_url(bucket_name, object_key, expiration=3600):
            """
            Generate a presigned URL for uploading a file to S3
            
            Args:
                bucket_name (str): S3 bucket name
                object_key (str): S3 object key
                expiration (int): URL expiration time in seconds
                
            Returns:
                str: Presigned URL
            """
            s3_client = boto3.client('s3')
            try:
                response = s3_client.generate_presigned_url(
                    'put_object',
                    Params={
                        'Bucket': bucket_name,
                        'Key': object_key,
                        'ContentType': 'application/octet-stream'
                    },
                    ExpiresIn=expiration
                )
                return response
            except Exception as e:
                print(f"Error generating presigned URL: {e}")
                return None

        def generate_unique_filename(original_filename):
            """
            Generate a unique filename for S3 uploads
            
            Args:
                original_filename (str): Original filename
                
            Returns:
                str: Unique filename
            """
            _, ext = os.path.splitext(original_filename)
            return f"{uuid.uuid4()}{ext}"
        EOF
        
        # Create a simple architecture document
        cat > docs/architecture.md << 'EOF'
        # Architecture Overview

        This document outlines the architecture of the Project-0 e-commerce application.

        ## Infrastructure Components

        ### AWS Services Used

        - **Amazon EC2**: Hosts the application in an Auto Scaling Group
        - **Amazon DynamoDB**: NoSQL database for product catalog, user carts, and orders
        - **Amazon S3**: Storage for static assets and product images
        - **Amazon CloudFront**: CDN for delivering static assets
        - **Amazon API Gateway**: API management for backend services
        - **AWS Lambda**: Serverless functions for specific operations
        - **Amazon Cognito**: User authentication and authorization
        - **Amazon VPC**: Network isolation and security
        - **Amazon Route 53**: DNS management
        - **AWS Certificate Manager**: SSL/TLS certificate management

        ### High-Level Architecture

        ```
        ┌─────────────┐     ┌─────────────┐     ┌─────────────┐
        │   Route 53  │────▶│ CloudFront  │────▶│     S3      │
        └─────────────┘     └─────────────┘     └─────────────┘
              │                                        ▲
              │                                        │
              ▼                                        │
        ┌─────────────┐     ┌─────────────┐     ┌─────────────┐
        │ API Gateway │────▶│ Application │────▶│ Static Files│
        └─────────────┘     │    (EC2)    │     └─────────────┘
              │             └─────────────┘
              │                    │
              │                    │
              ▼                    ▼
        ┌─────────────┐     ┌─────────────┐
        │   Lambda    │     │  DynamoDB   │
        └─────────────┘     └─────────────┘
              │                    ▲
              │                    │
              ▼                    │
        ┌─────────────┐            │
        │   Cognito   │────────────┘
        └─────────────┘
        ```

        ## Application Architecture

        The application follows a layered architecture:

        1. **Presentation Layer**: Flask templates and static assets
        2. **Application Layer**: Flask routes and controllers
        3. **Domain Layer**: Business logic and models
        4. **Data Access Layer**: DynamoDB and S3 interactions

        ## Security Considerations

        - All traffic is encrypted using HTTPS
        - Least privilege IAM roles for AWS services
        - Input validation and output encoding to prevent injection attacks
        - Session management with secure cookies
        - Regular security updates and patching

        ## Scalability

        - Auto Scaling Groups for EC2 instances
        - DynamoDB on-demand capacity
        - CloudFront for static asset caching
        - Stateless application design for horizontal scaling

        ## Monitoring and Logging

        - CloudWatch for metrics and logs
        - X-Ray for distributed tracing
        - CloudTrail for API activity monitoring
        - SNS for alerting on critical events
        EOF
        
        # Create a simple deployment script
        cat > scripts/deploy.sh << 'EOF'
        #!/bin/bash
        
        # Deploy the application to AWS
        
        # Check if AWS CLI is installed
        if ! command -v aws &> /dev/null; then
            echo "AWS CLI is not installed. Please install it first."
            exit 1
        fi
        
        # Check if environment is provided
        if [ -z "$1" ]; then
            echo "Usage: $0 <environment>"
            echo "Example: $0 dev"
            exit 1
        fi
        
        ENVIRONMENT=$1
        REGION=${2:-us-east-1}
        
        echo "Deploying to $ENVIRONMENT environment in $REGION region..."
        
        # Build the Docker image
        echo "Building Docker image..."
        docker build -t project0-app:$ENVIRONMENT ./app
        
        # Tag the Docker image for ECR
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_REPO="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/project0-app"
        
        echo "Tagging Docker image for ECR: $ECR_REPO:$ENVIRONMENT"
        docker tag project0-app:$ENVIRONMENT $ECR_REPO:$ENVIRONMENT
        
        # Login to ECR
        echo "Logging in to ECR..."
        aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com
        
        # Push the Docker image to ECR
        echo "Pushing Docker image to ECR..."
        docker push $ECR_REPO:$ENVIRONMENT
        
        # Update the ECS service
        echo "Updating ECS service..."
        aws ecs update-service --cluster project0-$ENVIRONMENT --service project0-app-service --force-new-deployment --region $REGION
        
        echo "Deployment completed successfully!"
        EOF
        
        # Make the deployment script executable
        chmod +x scripts/deploy.sh
        
    - name: Commit Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Initial project setup for ${{ github.event.inputs.environment }} environment"
        git push