name: 'Terraform CI/CD'

on:
  push:
    branches:
    - main
    paths:
    - 'terraform/**'
    - '.github/workflows/terraform.yml'
  pull_request:
    branches:
    - main
    paths:
    - 'terraform/**'
    - '.github/workflows/terraform.yml'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

jobs:
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform
      
      - name: Run checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7
        terraform_wrapper: false
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-east-1
    
    - name: Terraform Format
      id: fmt
      run: terraform -chdir=terraform fmt -check
    
    - name: Terraform Init
      id: init
      run: |
        terraform -chdir=terraform init \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"
    
    - name: Terraform Validate
      id: validate
      run: terraform -chdir=terraform validate
    
    - name: Terraform Plan
      id: plan
      run: |
        terraform -chdir=terraform plan \
          -no-color \
          -input=false \
          -out=tfplan
      continue-on-error: true
    
    - name: Redact Sensitive Data
      if: github.event_name == 'pull_request'
      run: |
        terraform -chdir=terraform show -no-color tfplan > plan.txt
        # Remove sensitive data patterns
        sed -i 's/\(password\|token\|key\|secret\)[[:space:]]*=[[:space:]]*"[^"]*"/\1 = "***REDACTED***"/gi' plan.txt
    
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outcome == 'success' && 'terraform\n' || 'PLAN FAILED\n' }}${{ steps.plan.outcome == 'success' && '$(cat plan.txt)' || steps.plan.outputs.stderr }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Request Approval
      uses: trstringer/manual-approval@v1
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      with:
        secret: ${{ secrets.GITHUB_TOKEN }}
        approvers: ${{ vars.TERRAFORM_APPROVERS }}
        minimum-approvals: 1
        issue-title: "Approve Terraform changes to production"
        issue-body: "Please review the Terraform plan and approve these changes to be applied to production."
        exclude-workflow-initiator-as-approver: false
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform -chdir=terraform apply \
          -input=false \
          tfplan